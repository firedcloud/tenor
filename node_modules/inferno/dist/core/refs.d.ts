import type { RefObject, Inferno } from './types';
export declare function createRef<T = Element>(): RefObject<T>;
export declare function forwardRef<T = any, P = {}>(render: (props: Readonly<{
    children?: Inferno.InfernoNode | undefined;
}> & Readonly<P>, ref: RefObject<T>) => Inferno.InfernoNode): any;
export declare function unmountRef(ref: any): void;
export declare function mountRef(ref: any, value: any, lifecycle: Function[]): void;
